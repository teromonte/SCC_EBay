config:
  target: 'https://scc-backend-55355.azurewebsites.net/rest'
  http:
    timeout: 10
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true  # new mode to aggregate metrics in artillery
  processor: "./test-utils.js"
  phases:
  - name: "Warm up"
    arrivalRate: 1
    duration: 10
  - name: "Test"
    arrivalRate: 5
    duration: 60
scenarios:
  - name: 'Mixed browsing'
    weight: 40
    flow:
      - function: "selectUserSkewed"
      - post:                          # First: login as a user
          url: "/user/auth"
          name: "POST:/user/auth"
          headers:
            Content-Type: application/json
          json:
            user: "{{ user }}"
            pwd: "{{ pwd }}"
      - loop:
          - function: "decideNextAction"
          - get:                          # Get user auctions
              url: "/user/{{ user2 }}/auctions"
              name: "GET:/user/*/auctions"
              headers:
                Accept: application/json
              capture:
                json: "$"
                as: "auctionsLst"
              ifTrue: "nextAction == 2"
          - post:                          # CREATE an auction; first post image
              url: "/media"
              name: "POST:/media"
              headers:
                Content-Type: application/octet-stream
                Accept: application/json
              beforeRequest: "uploadImageBody"
              capture:
                regexp: "(.+)"
                as: "imageId"              # capture the reply as image id to be used in uction creation
              ifTrue: "nextAction == 3"
          - post:                          # Create auction
              url: "/auction"
              name: "POST:/auction"
              headers:
                Content-Type: application/json
                Accept: application/json
              json:
                description: "{{ description }}"
                title: "{{ title }}"
                owner: "{{ user }}"
                image: "{{ imageId }}"
                endTime: "{{ endTime }}"
                minimumPrice: "{{ minimumPrice }}"
                status: "{{ status }}"
              ifTrue: "nextAction == 3"
          - get:                          # Call methods for displaying auction: image, top bid, messages
              url: "/media/{{ imageId }}"
              name: "GET:/media"
              headers:
                Accept: application/octet-stream
              ifTrue: "nextAction >= 4"
          - get:
              url: "/auction/{{ auctionId }}/bid"   #get just top bid
              name: "GET:/auction/*/bid"
              headers:
                Accept: application/json
              capture:
                json: "$"
                as: "bidsLst"
              ifTrue: "nextAction >= 4"
          - get:
              url: "/auction/{{ auctionId }}/question"   #get just top bid
              name: "GET:/auction/*/question"
              headers:
                Accept: application/json
              capture:
                json: "$"
                as: "bidsLst"
              ifTrue: "nextAction >= 4"
          - function: "decideToCoverBid"
          - post:                          # New bid
              url: "/auction/{{ auctionId }}/bid"
              name: "POST:/auction/*/bid"
              headers:
                Content-Type: application/json
                Accept: application/json
              json:
                auction: "{{ auctionId }}"
                user: "{{ user }}"
                value: "{{ value }}"
              ifTrue: "value and nextAction == 5"
          - post:                          # Post message
              url: "/auction/{{ auctionId }}/question"
              name: "POST:/auction/*/question"
              headers:
                Content-Type: application/json
                Accept: application/json
              json:
                auction: "{{ auctionId }}"
                user: "{{ user }}"
                text: "{{ text }}"
              ifTrue: "nextAction == 6"
        whileTrue: "random80"
